package main;
import java.util.*;
public class Map<K, V> {
	ArrayList<MapNode<K,V>> buckets;
	int size;
	int bucketSize;
	
	public Map() {
		buckets = new ArrayList<>();
		bucketSize = 20;
		for(int i=0; i<bucketSize; i++) {
			buckets.add(null);
		}
	}
	
	private int getBucketIndex(K key) {
		int hashCode = key.hashCode();
		return Math.abs(hashCode) % buckets.size();
	}
	
	public V getValue(K key ){
		int bucketIndex = getBucketIndex(key);
		MapNode<K, V> head = buckets.get(bucketIndex);
		while(head != null) {
			if(head.key.equals(key)) {
				return head.value;
			}
			head = head.next;
		}
		return null;
	}
	
	public V removeKey(K key) {
		int bucketIndex = getBucketIndex(key);
		MapNode<K, V> head = buckets.get(bucketIndex);
		MapNode<K, V> prev = null;
		while(head != null) {
			if(head.key.equals(key)) {
				if(prev == null) {
					buckets.set(bucketIndex, head.next);
				} else {
					prev.next = head.next;
				}
				size--;
				return head.value;
			}
			prev = head;
			head = head.next;
		}
		return null;
	}
	
	public int size() {
		return size;
	}
	
	private void rehash() {
		
		ArrayList<MapNode<K, V>> tempBucket = buckets;
		buckets = new ArrayList<>();
	
		for(int i=0; i<bucketSize*2; i++) {
			buckets.add(null);
		}
		
		bucketSize = bucketSize*2;
		size = 0;
		
		for(int i=0; i<tempBucket.size(); i++) {
			MapNode<K, V> keyMap = tempBuckets.get(i);
			int bucketIndex = getBucketIndex(keyMap.key);
			MapNode<K, V> head = tempBucket.get(bucketIndex);
			while(head != null && head.next != null) {
				head = head.next;
			}
			if(head == null) {
				tempBucket.set(bucketIndex, head);
			} else {
				head.next = keyMap;
			}
		}
		
	}
	
	public void insert(K key, V value) {
		int bucketIndex = getBucketIndex(key);
		
		MapNode<K, V> head = buckets.get(bucketIndex);
		
		while(head != null) {
			if(head.key.equals(key)) {
				head.value = value;
				return;
			}
			head = head.next;
		}
		head = buckets.get(bucketIndex);
		MapNode<K, V> newMapNode = new MapNode<>(key, value);
		newMapNode.next = head;
		buckets.set(bucketIndex, newMapNode);
		size++;
		
		double loadFactor = (1.0*size) / bucketSize;
		if(loadFactor > 0.7) {
			rehash();
		}
	}
	
}
