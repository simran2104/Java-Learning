package main;

public class Trie {
	
	TrieNode root;
	
	public Trie() {
		root = new TrieNode('\0');
	}
	
	private void add(TrieNode root, String word) {
		if(word.length() == 0) {
			root.isTerminating = true;
			return;
		}
		
		int index = word.charAt(0) - 'A';
		TrieNode child = root.children[index];
		if(child == null) {
			TrieNode newNode = new TrieNode(word.charAt(0));
			root.children[index] = newNode;
			root.childCount++;
		}
		add(child, word.substring(1));
	}
	
	public void add(String word) {
		add(root, word);
	}
	
	private boolean search(TrieNode root, String word) {
		if(word.length() == 0) {
			return root.isTerminating;
		}
		int index = word.charAt(0) - 'A';
		TrieNode child = root.children[index];
		if(child == null) return false;
		return search(child, word.substring(1));
	}
	
	public boolean search(String word) {
		return search(root, word);
	}
	
	private void delete(TrieNode root, String word) {
		if(word.length() == 0) {
			root.isTerminating = false;
			return;
		} 
		
		int index = word.charAt(0) - 'A';
		TrieNode child = root.children[index];
		if(child == null) return;
		delete(child, word.substring(1));
		if(!child.isTerminating && child.childCount == 0) {
			root.children[index] = null;
			root.childCount--;
		}
	}
	
	public void delete(String word) {
		delete(root, word);
	}
}
