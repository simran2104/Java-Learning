package main;

public class Board {
	char player1Symbol;
	char playyer2Symbol;
	int count;
	int boardSize;
	char[][] board;
	
	public final static int PLAYER_1_WINS = 1;
	public final static int PLAYER_2_WINS = 2;
	public final static int DRAW = 3;
	public final static int INVALID = 4;
	public final static int INCOMPLETE = 5;
	
	
	public Board(char symbol1, char symbol2) {
		this.player1Symbol = symbol1;
		this.playyer2Symbol = symbol2;
		this.boardSize = 3;
		this.count = 0;
		this.board = new char[boardSize][boardSize];
		
		for(int i=0; i<boardSize; i++) {
			for(int j=0; j<boardSize; j++) {
				board[i][j] = ' ';
			}
		}
	}
	
	public int move(char playerSymbol, int x, int y) {
		
		if(x < 0 || x >= boardSize || y < 0 || y >= boardSize || board[x][y] != ' ') {
			return INVALID;
		}
		
		board[x][y] = playerSymbol;
		count++;
		
		// Check Row
		if(board[x][0] == board[x][1] && board[x][1] == board[x][2]) {
			if(playerSymbol == player1Symbol) {
				return PLAYER_1_WINS;
			} else {
				return PLAYER_2_WINS;
			}
		}
		// check column
		if(board[0][y] == board[1][y] && board[1][y] == board[2][y]) {
			if(playerSymbol == player1Symbol) {
				return PLAYER_1_WINS;
			} else {
				return PLAYER_2_WINS;
			}
		}
		
		// check diagonal
		if(board[0][0] == board[1][1] && board[2][2] == board[1][1]) {
			if(playerSymbol == player1Symbol) {
				return PLAYER_1_WINS;
			} else {
				return PLAYER_2_WINS;
			}
		}
		if(board[2][0] == board[1][1] && board[0][2] == board[1][1]) {
			if(playerSymbol == player1Symbol) {
				return PLAYER_1_WINS;
			} else {
				return PLAYER_2_WINS;
			}
		}
		
		if(count == boardSize*boardSize) {
			return DRAW;
		}
		
		return INCOMPLETE;
	}
	
	public void print() {
		System.out.println("-------------");
		for(int i=0; i<boardSize; i++) {
			for(int j=0; j<boardSize; j++) {
				System.out.print("|"+board[i][j] + "|");
			}
			System.out.println();
		}
		System.out.println("-------------");
	}
}
