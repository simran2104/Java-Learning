package tree;
import java.util.*;

public class TreeUse {
	public static TreeNode<Integer> takeInput(Scanner sc) {
		System.out.println("Enter the Node: ");
		int n = sc.nextInt();
		TreeNode<Integer> root =  new TreeNode<>(n);
		System.out.println("Enter the no. of children for: " + n);
		int size = sc.nextInt();
		for(int i=0; i<size; i++) {
			root.children.add(takeInput(sc));
		}
		return root;
	}
	public static void print(TreeNode<Integer> root) {
		String s = root.data + ": ";
		for(int i=0; i<root.children.size(); i++) {
			s = s + root.children.get(i).data + ",";
		}
		System.out.println(s);
		for(int i=0; i<root.children.size(); i++) {
			print(root.children.get(i));
		}
	}
	
	public static TreeNode<Integer> takeInputLevelWise() {
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the root Node: ");
		int rootdata = sc.nextInt();
		Queue<TreeNode<Integer>> queue = new LinkedList<>();
		TreeNode<Integer> root = new TreeNode<>(rootdata);
		queue.add(root);
		
		while(!queue.isEmpty()) {
			TreeNode<Integer> parentNode = queue.poll();
			System.out.println("Enter no. of children of "+parentNode.data + " :");
			int size = sc.nextInt();
			for(int i=0; i<size; i++) {
				System.out.println("Enter "+ (i+1) +" children of "+parentNode.data + " :");
				int childData = sc.nextInt();
				TreeNode<Integer> childNode = new TreeNode<>(childData);
				parentNode.children.add(childNode);
				queue.add(childNode);
			}
		}
		sc.close();
		return root;
	}
	
	public static void printLevelWise(TreeNode<Integer> root) {
		Queue<TreeNode<Integer>> queue = new LinkedList<>();
		queue.add(root);
		while(!queue.isEmpty()) {
			TreeNode<Integer> parentNode = queue.poll();
			String s = parentNode.data + ": ";
			for(int i = 0; i<parentNode.children.size(); i++) {
				s = s + parentNode.children.get(i).data + ", ";
				queue.add(parentNode.children.get(i));
			}
			System.out.println(s);
		}
	}
	
	public static int totalNodes(TreeNode<Integer> root) {
		if(root == null) {
			return 0;
		}
		int n = 1;
		for(int i = 0; i<root.children.size(); i++) {
			n = n + totalNodes(root.children.get(i));
		}
		return n;
	}
	
	public static int largestDataOfNode(TreeNode<Integer> root) {
		int largest = root.data;
		for(int i=0; i<root.children.size(); i++) {
			largest = (largest > root.data) ? largest: root.data;
			largestDataOfNode(root.children.get(i), largest);
		}
		
		return largest;
	}
	
	public static void main(String[] args) {
//		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter all the nodes of the Tree: ");
//		TreeNode<Integer> root = takeInput(sc);
//		print(root);
		
		TreeNode<Integer> root = takeInputLevelWise();
		printLevelWise(root);
		
		System.out.println("Total No. of Nodes in the tree is: " + totalNodes(root));
		
		System.out.println("Largest Data of the Node is: " + largestDataOfNode(root));
	}
}
